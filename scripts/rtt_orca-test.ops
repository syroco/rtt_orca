#!/usr/bin/env deployer

require("print")
require("os")
import("rtt_orca")
import("eigen_typekit")

this.require("orca_logger")     
orca_logger.setLogLevel( orca_logger.debug )

var string urdf = "/home/hoarau/isir/orca_ws/src/orca/examples/lwr.urdf"
var string base_frame = "link_0"
var eigen_vector gravity = array(0.0, 0.0, -9.81)

import("rtt_gazebo_embedded")
loadComponent("gazebo","RTTGazeboEmbedded")
setActivity("gazebo",0,10,ORO_SCHED_OTHER)
gazebo.world_path = "worlds/empty.world"
gazebo.configure()
gravity = gazebo.getGravity()
gazebo.insertModelFromURDF( urdf )
gazebo.start()


import("rtt_gazebo_robot_interface")
loadComponent("robot","RttGazeboRobotInterface")
setActivity("robot",0,10,ORO_SCHED_RT)
robot.model_name = "lwr"
robot.configure()
robot.setModelConfiguration(strings("joint_0","joint_1","joint_3","joint_5"),array(-2.2,-0.1,1.47,-1.47))
robot.start()


loadComponent("regx","rtt_orca::task::RttRegularisationTask<orca::optim::ControlVariable::X>")
setActivity("regx",0.001,20,ORO_SCHED_RT)
regx.robot_model.loadModelFromFile(urdf)
regx.robot_model.setBaseFrame(base_frame)
regx.robot_model.setGravity(gravity)
connectPeers("regx","robot")
regx.connectToRobot("robot")
regx.configure()
regx.start()

regx.activate()
regx.insertInProblem()


loadComponent("dyneq","rtt_orca::constraint::RttDynamicsEquationConstraint")
setActivity("dyneq",0.001,30,ORO_SCHED_RT)
dyneq.robot_model.loadModelFromFile(urdf)
dyneq.robot_model.setBaseFrame(base_frame)
dyneq.robot_model.setGravity(gravity)
connectPeers("dyneq","robot")
dyneq.connectToRobot("robot")
dyneq.configure()
dyneq.start()

dyneq.activate()
dyneq.insertInProblem()

loadComponent("qp","rtt_orca::optim::RttQPSolver<orca::optim::WeightedQPSolver>")
setActivity("qp",0.001,70,ORO_SCHED_RT)
qp.setPrintLevel(0)
qp.configure()
qp.start()

connect("qp.output.JointTorque","robot.command.JointTorque",ConnPolicy())

