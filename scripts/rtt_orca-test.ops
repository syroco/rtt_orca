#!/usr/bin/env deployer

require("print")
require("os")
import("rtt_orca")
import("eigen_typekit")
loadService("this","orca_helper")  
loadService("this","orca_logger")  

if(os.argc != 2) then
{
    print.log(Error,"\n\033[1;31mUsage deployer -s rtt_orca-test.ops -l info -- /path/to/robot.urdf \033[0m\n")
}

var string urdf = os.argv[1]
print.ln("\033[34;1mLoading URDF " + urdf + "\033[0m")

orca_logger.setLogLevel( orca_logger.debug )

var string base_frame = "link_0"
var eigen_vector gravity = array(0.0, 0.0, -9.81)

import("rtt_gazebo_embedded")
loadComponent("gazebo","RTTGazeboEmbedded")
setActivity("gazebo",0,10,ORO_SCHED_OTHER)
gazebo.world_path = "worlds/empty.world"
gazebo.configure()
gravity = gazebo.getGravity()
gazebo.insertModelFromURDF( urdf )
gazebo.start()


import("rtt_gazebo_robot_interface")
loadComponent("robot","RttGazeboRobotInterface")
setActivity("robot",0,10,ORO_SCHED_RT)
robot.model_name = "lwr"
robot.configure()
robot.setModelConfiguration(strings("joint_0","joint_1","joint_3","joint_5"),array(-2.2,-0.1,1.47,-1.47))
robot.start()


loadComponent("regx","rtt_orca::task::RttRegularisationTask<orca::optim::ControlVariable::X>")
setActivity("regx",0.001,20,ORO_SCHED_RT)
regx.robot_model.loadModelFromFile(urdf)
regx.robot_model.setBaseFrame(base_frame)
regx.robot_model.setGravity(gravity)
regx.EuclidianNorm.setWeight(0.0001)
connectPeers("regx","robot")
regx.connectToRobot("robot")
regx.configure()
regx.start()
regx.insertInProblem()

loadComponent("jnt_acc","rtt_orca::task::RttJointAccelerationTask")
setActivity("jnt_acc",0.001,20,ORO_SCHED_RT)
jnt_acc.robot_model.loadModelFromFile(urdf)
jnt_acc.robot_model.setBaseFrame(base_frame)
jnt_acc.robot_model.setGravity(gravity)

jnt_acc.pid.setProportionalGain(array(100.,100.,100.,100.,100.,100.,100.))
jnt_acc.pid.setDerivativeGain(array(1.,1.,1.,1.,1.,1.,1.))
jnt_acc.setDesired(array(0.,0.,0.,0.,0.,0.,0.) , array(0.,0.,0.,0.,0.,0.,0.) , array(0.,0.,0.,0.,0.,0.,0.))

connectPeers("jnt_acc","robot")
jnt_acc.connectToRobot("robot")
jnt_acc.configure()
jnt_acc.setWeight(0.1)
jnt_acc.start()
jnt_acc.insertInProblem()

loadComponent("cart_task","rtt_orca::task::RttCartesianTask")
setActivity("cart_task",0.001,20,ORO_SCHED_RT)
cart_task.robot_model.loadModelFromFile(urdf)
cart_task.robot_model.setBaseFrame(base_frame)
cart_task.robot_model.setGravity(gravity)
connectPeers("cart_task","robot")
cart_task.connectToRobot("robot")
cart_task.setControlFrame("link_7")
cart_task.configure()
cart_task.start()
cart_task.insertInProblem()

loadComponent("cart_acc_pid","rtt_orca::common::RttCartesianAccelerationPID")
setActivity("cart_acc_pid",0.001,20,ORO_SCHED_RT)
cart_acc_pid.robot_model.loadModelFromFile(urdf)
cart_acc_pid.robot_model.setBaseFrame(base_frame)
cart_acc_pid.robot_model.setGravity(gravity)
connectPeers("cart_acc_pid","robot")
cart_acc_pid.connectToRobot("robot")

cart_acc_pid.pid.setProportionalGain(array(1000.,1000.,1000.,1000.,1000.,1000.))
cart_acc_pid.pid.setDerivativeGain(array(20.,20.,20.,20.,20.,20.))

cart_acc_pid.setBaseFrame( cart_task.getBaseFrame() )
cart_acc_pid.setControlFrame( cart_task.getControlFrame() )
connect("cart_acc_pid.output.CartesianAcceleration","cart_task.input.CartesianAcceleration",ConnPolicy())
cart_acc_pid.configure()
cart_acc_pid.start()

cart_acc_pid.setDesiredPosition(array(-0.5,-0.5,0.5), array(-3.14,0.,3.14))

loadComponent("dyneq","rtt_orca::constraint::RttDynamicsEquationConstraint")
setActivity("dyneq",0.001,30,ORO_SCHED_RT)
dyneq.robot_model.loadModelFromFile(urdf)
dyneq.robot_model.setBaseFrame(base_frame)
dyneq.robot_model.setGravity(gravity)
connectPeers("dyneq","robot")
dyneq.connectToRobot("robot")
dyneq.configure()
dyneq.start()
dyneq.insertInProblem()

loadComponent("jnt_trq_lim","rtt_orca::constraint::RttJointTorqueLimitConstraint")
setActivity("jnt_trq_lim",0.001,20,ORO_SCHED_RT)
jnt_trq_lim.robot_model.loadModelFromFile(urdf)
jnt_trq_lim.robot_model.setBaseFrame(base_frame)
jnt_trq_lim.robot_model.setGravity(gravity)
connectPeers("jnt_trq_lim","robot")
jnt_trq_lim.connectToRobot("robot")
var eigen_vector trq_min = array( -175.,-175.,-99.,-99.,-99.,-37.,-37.)
var eigen_vector trq_max = array(  175., 175., 99., 99., 99., 37., 37.)
jnt_trq_lim.setLimits( trq_min,trq_max )
jnt_trq_lim.configure()
jnt_trq_lim.start()
jnt_trq_lim.insertInProblem()

loadComponent("jnt_acc_lim","rtt_orca::constraint::RttJointAccelerationLimitConstraint")
setActivity("jnt_acc_lim",0.001,20,ORO_SCHED_RT)
jnt_acc_lim.robot_model.loadModelFromFile(urdf)
jnt_acc_lim.robot_model.setBaseFrame(base_frame)
jnt_acc_lim.robot_model.setGravity(gravity)
connectPeers("jnt_acc_lim","robot")
jnt_acc_lim.connectToRobot("robot")
var eigen_vector acc_min = eigen_vector( robot.getNrOfDegreesOfFreedom(), -400.0)
var eigen_vector acc_max = eigen_vector( robot.getNrOfDegreesOfFreedom(),  400.0)
jnt_acc_lim.setLimits( acc_min,acc_max )
jnt_acc_lim.configure()
jnt_acc_lim.start()
jnt_acc_lim.insertInProblem()

loadComponent("jnt_vel_lim","rtt_orca::constraint::RttJointVelocityLimitConstraint")
setActivity("jnt_vel_lim",0.001,20,ORO_SCHED_RT)
jnt_vel_lim.robot_model.loadModelFromFile(urdf)
jnt_vel_lim.robot_model.setBaseFrame(base_frame)
jnt_vel_lim.robot_model.setGravity(gravity)
connectPeers("jnt_vel_lim","robot")
jnt_vel_lim.connectToRobot("robot")
var eigen_vector vel_min = eigen_vector( robot.getNrOfDegreesOfFreedom(), -1.0)
var eigen_vector vel_max = eigen_vector( robot.getNrOfDegreesOfFreedom(),  1.0)
jnt_vel_lim.setLimits( vel_min,vel_max )
jnt_vel_lim.setHorizon( jnt_vel_lim.getPeriod() * 15.)
jnt_vel_lim.configure()
jnt_vel_lim.start()
jnt_vel_lim.insertInProblem()

loadComponent("jnt_pos_lim","rtt_orca::constraint::RttJointPositionLimitConstraint")
setActivity("jnt_pos_lim",0.001,20,ORO_SCHED_RT)
jnt_pos_lim.robot_model.loadModelFromFile(urdf)
jnt_pos_lim.robot_model.setBaseFrame(base_frame)
jnt_pos_lim.robot_model.setGravity(gravity)
connectPeers("jnt_pos_lim","robot")
jnt_pos_lim.connectToRobot("robot")
jnt_pos_lim.setHorizon( jnt_pos_lim.getPeriod() * 15.)
jnt_pos_lim.configure()
jnt_pos_lim.start()
jnt_pos_lim.insertInProblem()

loadComponent("qp","rtt_orca::optim::RttQPSolver<orca::optim::WeightedQPSolver>")
setActivity("qp",0.001,70,ORO_SCHED_RT)
qp.setPrintLevel(0)
qp.configure()
qp.start()

connect("qp.output.JointTorque","robot.command.JointTorque",ConnPolicy())

this.orca_helper.printAll()
